{"version":3,"sources":["Cheer.tsx","PostList.tsx","GuestPage.tsx","Create.tsx","CheerList.tsx","OwnerPage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["NET_TYPE","NetworkType","MAIN_NET","Cheer","props","useState","hash","setHash","cheer","setCheer","isRequest","setIsRequest","address","Address","createFromRawAddress","useEffect","window","SSS","requestSign","then","signedTx","TransactionHttp","announce","Wrapper","TextField","label","value","fullWidth","onChange","e","target","Button","onClick","message","tx","TransferTransaction","create","Deadline","PlainMessage","UInt64","fromUint","setTransaction","styled","display","justifyContent","alignItems","flexDirection","POST_REG","PostList","transactions","setTransactions","transactionHttp","RepositoryFactoryHttp","createTransactionRepository","searchCriteria","group","TransactionGroup","Confirmed","recipientAddress","order","Order","Desc","type","TransactionType","TRANSFER","search","toPromise","txs","undefined","getPostTxs","data","postTxs","test","payload","push","getPostMsg","split","Root","map","transactionInfo","signature","margin","OWNER_ADDR","GuestPage","plain","width","Create","contents","setContents","CHEER_REG","CheerList","getCheerTxs","cheerTxs","getCheerMsg","getCheerHash","addr","signer","createFromPublicKey","publicKey","pretty","OwnerPage","Flex","pubkey","App","setAddr","setPubkey","console","log","setTimeout","activeAddress","activePublicKey","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0484781a.chunk.js","sourcesContent":["import { Button, TextField } from '@mui/material'\nimport styled from '@emotion/styled'\nimport { useEffect, useState } from 'react'\nimport {\n  Address,\n  Deadline,\n  NetworkType,\n  PlainMessage,\n  SignedTransaction,\n  TransactionHttp,\n  TransferTransaction,\n  UInt64,\n} from 'symbol-sdk'\n\nconst EPOCH = 1615853185\nconst NODE_URL = 'https://symbol-mikun.net:3001'\nconst NET_TYPE = NetworkType.MAIN_NET\n\ntype Props = {\n  address: string\n}\n\ninterface SSSWindow extends Window {\n  SSS: any\n}\ndeclare const window: SSSWindow\n\nfunction Cheer(props: Props) {\n  const [hash, setHash] = useState('')\n  const [cheer, setCheer] = useState('')\n  const [isRequest, setIsRequest] = useState<boolean>(false)\n  const address = Address.createFromRawAddress(props.address)\n\n  useEffect(() => {\n    if (isRequest) {\n      window.SSS.requestSign().then((signedTx: SignedTransaction) => {\n        new TransactionHttp(NODE_URL).announce(signedTx)\n      })\n    }\n  }, [isRequest])\n\n  const submit = () => {\n    const message = `::CHEER|${hash}::${cheer}`\n    const tx = TransferTransaction.create(\n      Deadline.create(EPOCH),\n      address,\n      [],\n      PlainMessage.create(message),\n      NET_TYPE,\n      UInt64.fromUint(2000000)\n    )\n    window.SSS.setTransaction(tx)\n\n    setIsRequest(true)\n  }\n\n  return (\n    <Wrapper>\n      <TextField\n        label=\"ハッシュ\"\n        value={hash}\n        fullWidth\n        onChange={(e) => setHash(e.target.value)}\n      />\n      <TextField\n        label=\"応援\"\n        value={cheer}\n        fullWidth\n        onChange={(e) => setCheer(e.target.value)}\n      />\n      <Button onClick={submit}>送信</Button>\n    </Wrapper>\n  )\n}\n\nexport default Cheer\n\nconst Wrapper = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-end',\n  flexDirection: 'column',\n})","/* eslint-disable react-hooks/exhaustive-deps */\nimport styled from '@emotion/styled'\nimport { useEffect, useState } from 'react'\nimport {\n  Address,\n  Order,\n  RepositoryFactoryHttp,\n  TransactionGroup,\n  TransactionSearchCriteria,\n  TransactionType,\n  TransferTransaction,\n} from 'symbol-sdk'\n\nconst NODE_URL = 'https://symbol-mikun.net:3001'\n\ntype Props = {\n  address: string\n}\n\nconst POST_REG = /^::CREATE::/\n\nfunction PostList(props: Props) {\n  const [transactions, setTransactions] = useState<TransferTransaction[]>([])\n\n  const address = Address.createFromRawAddress(props.address)\n\n  useEffect(() => {\n    const repositoryFactory = new RepositoryFactoryHttp(NODE_URL)\n    const transactionHttp = repositoryFactory.createTransactionRepository()\n    const searchCriteria: TransactionSearchCriteria = {\n      group: TransactionGroup.Confirmed,\n      recipientAddress: address,\n      order: Order.Desc,\n      type: [TransactionType.TRANSFER],\n    }\n    transactionHttp\n      .search(searchCriteria)\n      .toPromise()\n      .then((txs) => {\n        if (txs === undefined) return\n\n        setTransactions(getPostTxs(txs.data as TransferTransaction[]))\n      })\n  }, [])\n\n  const getPostTxs = (txs: TransferTransaction[]): TransferTransaction[] => {\n    const postTxs: TransferTransaction[] = []\n\n    for (const tx of txs) {\n      if (POST_REG.test(tx.message.payload)) {\n        postTxs.push(tx)\n      }\n    }\n\n    return postTxs\n  }\n\n  const getPostMsg = (tx: TransferTransaction): string => {\n    return tx.message.payload.split(POST_REG)[1]\n  }\n\n  return (\n    <Root>\n      <h1>投稿</h1>\n      {transactions.map((tx) => {\n        const hash = !!tx.transactionInfo ? tx.transactionInfo.hash : ''\n        return (\n          <div key={tx.signature}>\n            <h3>投稿 : {getPostMsg(tx)}</h3>\n            <h3>ハッシュ : {hash}</h3>\n            <hr />\n          </div>\n        )\n      })}\n    </Root>\n  )\n}\n\nexport default PostList\n\nconst Root = styled('div')({\n  margin: '32px',\n})\n","import styled from '@emotion/styled'\nimport { Address } from 'symbol-sdk'\nimport Cheer from './Cheer'\nimport PostList from './PostList'\n\ntype Props = {\n  address: string\n}\nconst OWNER_ADDR = Address.createFromRawAddress(\n  'NBOGLHXSI7FDRAO2CMZV5PQZ5UHZ3IED67ULPSY'\n)\n\nfunction GuestPage(props: Props) {\n  return (\n    <Wrapper>\n      <h1>Hello Symbol 「{props.address}」</h1>\n      <Cheer address={OWNER_ADDR.plain()} />\n      <PostList address={OWNER_ADDR.plain()} />\n    </Wrapper>\n  )\n}\n\nexport default GuestPage\n\nconst Wrapper = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  width: '80vw',\n  margin: '10vw',\n})\n  \n  ","import { Button, TextField } from '@mui/material'\nimport styled from '@emotion/styled'\nimport { useEffect, useState } from 'react'\nimport {\n  Address,\n  Deadline,\n  NetworkType,\n  PlainMessage,\n  SignedTransaction,\n  TransactionHttp,\n  TransferTransaction,\n  UInt64,\n} from 'symbol-sdk'\n\nconst EPOCH = 1615853185\nconst NODE_URL = 'https://symbol-mikun.net:3001'\nconst NET_TYPE = NetworkType.MAIN_NET\n\ntype Props = {\n  address: string\n}\n\ninterface SSSWindow extends Window {\n  SSS: any\n}\ndeclare const window: SSSWindow\n\nfunction Create(props: Props) {\n  const [contents, setContents] = useState('')\n  const [isRequest, setIsRequest] = useState<boolean>(false)\n  const address = Address.createFromRawAddress(props.address)\n\n  useEffect(() => {\n    if (isRequest) {\n      window.SSS.requestSign().then((signedTx: SignedTransaction) => {\n        new TransactionHttp(NODE_URL).announce(signedTx)\n      })\n    }\n  }, [isRequest])\n\n  const submit = () => {\n    const message = `::CREATE::${contents}`\n    const tx = TransferTransaction.create(\n      Deadline.create(EPOCH),\n      address,\n      [],\n      PlainMessage.create(message),\n      NET_TYPE,\n      UInt64.fromUint(30000)\n    )\n    window.SSS.setTransaction(tx)\n\n    setIsRequest(true)\n  }\n\n  return (\n    <Wrapper>\n      <TextField\n        label=\"contents\"\n        value={contents}\n        fullWidth\n        onChange={(e) => setContents(e.target.value)}\n      />\n      <Button onClick={submit}>送信</Button>\n    </Wrapper>\n  )\n}\n\nexport default Create\n\nconst Wrapper = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'flex-end',\n  flexDirection: 'column',\n})","/* eslint-disable react-hooks/exhaustive-deps */\nimport styled from '@emotion/styled'\nimport { useEffect, useState } from 'react'\nimport {\n  Address,\n  NetworkType,\n  Order,\n  RepositoryFactoryHttp,\n  TransactionGroup,\n  TransactionSearchCriteria,\n  TransactionType,\n  TransferTransaction,\n} from 'symbol-sdk'\n\nconst NODE_URL = 'https://symbol-mikun.net:3001'\nconst NET_TYPE = NetworkType.MAIN_NET\n\ntype Props = {\n  address: string\n  pubkey: string\n}\n\nconst CHEER_REG = /^::CHEER/\n\nfunction CheerList(props: Props) {\n  const [transactions, setTransactions] = useState<TransferTransaction[]>([])\n\n  const address = Address.createFromRawAddress(props.address)\n\n  useEffect(() => {\n    const repositoryFactory = new RepositoryFactoryHttp(NODE_URL)\n    const transactionHttp = repositoryFactory.createTransactionRepository()\n    const searchCriteria: TransactionSearchCriteria = {\n      group: TransactionGroup.Confirmed,\n      recipientAddress: address,\n      order: Order.Desc,\n      type: [TransactionType.TRANSFER],\n    }\n    transactionHttp\n      .search(searchCriteria)\n      .toPromise()\n      .then((txs) => {\n        if (txs === undefined) return\n        setTransactions(getCheerTxs(txs.data as TransferTransaction[]))\n      })\n  }, [])\n\n  const getCheerTxs = (txs: TransferTransaction[]): TransferTransaction[] => {\n    const cheerTxs: TransferTransaction[] = []\n\n    for (const tx of txs) {\n      if (CHEER_REG.test(tx.message.payload)) {\n        cheerTxs.push(tx)\n      }\n    }\n\n    return cheerTxs\n  }\n\n  const getCheerMsg = (tx: TransferTransaction): string => {\n    const tmp = tx.message.payload.split('|')[1]\n    return tmp.split('::')[1]\n  }\n  const getCheerHash = (tx: TransferTransaction): string => {\n    const tmp = tx.message.payload.split('|')[1]\n    return tmp.split('::')[0]\n  }\n\n  return (\n    <Root>\n      <h1>応援</h1>\n      {transactions.map((tx) => {\n        const addr =\n          tx.signer !== undefined\n            ? Address.createFromPublicKey(\n                tx.signer?.publicKey,\n                NET_TYPE\n              ).pretty()\n            : 'NOT FOUND'\n        return (\n          <div key={tx.signature}>\n            <h3>TO: {getCheerHash(tx)}</h3>\n            <h3>メッセージ: {getCheerMsg(tx)}</h3>\n            <h3>FROM: {addr}</h3>\n            <hr />\n          </div>\n        )\n      })}\n    </Root>\n  )\n}\n\nexport default CheerList\n\nconst Root = styled('div')({\n  margin: '32px',\n})\n","import styled from '@emotion/styled'\nimport Create from './Create'\nimport CheerList from './CheerList'\nimport PostList from './PostList'\n\ntype Props = {\n  address: string\n  pubkey: string\n}\n\nfunction OwnerPage(props: Props) {\n  return (\n    <Wrapper>\n      <Create address={props.address} />\n      <Flex>\n        <PostList address={props.address} />\n        <CheerList address={props.address} pubkey={props.pubkey} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default OwnerPage\n\nconst Wrapper = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  width: '80vw',\n  margin: '10vw',\n})\nconst Flex = styled('div')({\n  display: 'flex',\n  justifyContent: 'center',\n  width: '100%',\n})\n","import React, { useEffect, useState } from 'react'\nimport { Address } from 'symbol-sdk'\nimport './App.css'\nimport GuestPage from './GuestPage'\nimport OwnerPage from './OwnerPage'\n\ninterface SSSWindow extends Window {\n  SSS: any\n}\ndeclare const window: SSSWindow\n\nconst OWNER_ADDR = Address.createFromRawAddress(\n  'NBOGLHXSI7FDRAO2CMZV5PQZ5UHZ3IED67ULPSY'\n)\n\nfunction App() {\n  const [addr, setAddr] = useState<Address | null>(null)\n  const [pubkey, setPubkey] = useState<string>('')\n\n  console.log('render')\n\n  useEffect(() => {\n    console.log('hello')\n    setTimeout(() => {\n      const activeAddress = window.SSS.activeAddress\n      const activePublicKey = window.SSS.activePublicKey\n      setAddr(Address.createFromRawAddress(activeAddress))\n      setPubkey(activePublicKey)\n    }, 500)\n  }, [])\n\n  if (addr === null) {\n    return (\n      <div>\n        <h1>Hello Symbol not set address</h1>\n      </div>\n    )\n  }\n\n  if (OWNER_ADDR.plain() === addr.plain()) {\n    return <OwnerPage address={addr.plain()} pubkey={pubkey} />\n  }\n  return <GuestPage address={addr.plain()} />\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()"],"sourceRoot":""}